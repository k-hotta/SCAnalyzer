/* The following code was generated by JFlex 1.4.3 on 12/10/03 15:42 */

/* This is a lexer for java */

package jp.ac.osaka_u.ist.sdl.c20r.rev_analyzer;

import java.util.ArrayList;
import java.util.List;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/10/03 15:42 from the specification file
 * <tt>java.flex</tt>
 */
public class JavaLexer extends Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\3\1\73"+
    "\1\41\1\0\1\7\1\102\1\77\1\32\1\60\1\61\1\5\1\25"+
    "\1\67\1\24\1\31\1\4\1\11\3\42\4\21\2\14\1\76\1\66"+
    "\1\72\1\70\1\71\1\75\1\6\3\16\1\27\1\23\1\27\5\7"+
    "\1\13\13\7\1\20\2\7\1\64\1\33\1\65\1\101\1\7\1\0"+
    "\1\45\1\35\1\15\1\30\1\22\1\26\1\51\1\50\1\43\1\7"+
    "\1\54\1\12\1\56\1\37\1\46\1\55\1\7\1\40\1\44\1\36"+
    "\1\34\1\52\1\53\1\17\1\47\1\57\1\62\1\100\1\63\1\74"+
    "\41\10\2\0\4\7\4\0\1\7\2\0\1\10\7\0\1\7\4\0"+
    "\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7\16\0"+
    "\5\7\7\0\1\7\1\0\1\7\21\0\160\10\5\7\1\0\2\7"+
    "\2\0\4\7\10\0\1\7\1\0\3\7\1\0\1\7\1\0\24\7"+
    "\1\0\123\7\1\0\213\7\1\0\5\10\2\0\236\7\11\0\46\7"+
    "\2\0\1\7\7\0\47\7\11\0\55\10\1\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\1\10\10\0\33\7\5\0\3\7\15\0\4\10"+
    "\7\0\1\7\4\0\13\10\5\0\53\7\37\10\4\0\2\7\1\10"+
    "\143\7\1\0\1\7\10\10\1\0\6\10\2\7\2\10\1\0\4\10"+
    "\2\7\12\10\3\7\2\0\1\7\17\0\1\10\1\7\1\10\36\7"+
    "\33\10\2\0\131\7\13\10\1\7\16\0\12\10\41\7\11\10\2\7"+
    "\4\0\1\7\5\0\26\7\4\10\1\7\11\10\1\7\3\10\1\7"+
    "\5\10\22\0\31\7\3\10\244\0\4\10\66\7\3\10\1\7\22\10"+
    "\1\7\7\10\12\7\2\10\2\0\12\10\1\0\7\7\1\0\7\7"+
    "\1\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\1\7\3\0\4\7\2\0\1\10\1\7\7\10\2\0\2\10"+
    "\2\0\3\10\1\7\10\0\1\10\4\0\2\7\1\0\3\7\2\10"+
    "\2\0\12\10\4\7\7\0\1\7\5\0\3\10\1\0\6\7\4\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0"+
    "\2\7\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0"+
    "\1\10\7\0\4\7\1\0\1\7\7\0\14\10\3\7\1\10\13\0"+
    "\3\10\1\0\11\7\1\0\3\7\1\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\5\7\2\0\1\10\1\7\10\10\1\0\3\10\1\0"+
    "\3\10\2\0\1\7\17\0\2\7\2\10\2\0\12\10\1\0\1\7"+
    "\17\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\5\7\2\0\1\10\1\7\7\10\2\0\2\10"+
    "\2\0\3\10\10\0\2\10\4\0\2\7\1\0\3\7\2\10\2\0"+
    "\12\10\1\0\1\7\20\0\1\10\1\7\1\0\6\7\3\0\3\7"+
    "\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\3\0\3\7\3\0\14\7\4\0\5\10\3\0\3\10\1\0\4\10"+
    "\2\0\1\7\6\0\1\10\16\0\12\10\11\0\1\7\7\0\3\10"+
    "\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7"+
    "\3\0\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\1\0"+
    "\2\7\6\0\2\7\2\10\2\0\12\10\22\0\2\10\1\0\10\7"+
    "\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0\1\10"+
    "\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\7"+
    "\1\0\2\7\2\10\2\0\12\10\1\0\2\7\17\0\2\10\1\0"+
    "\10\7\1\0\3\7\1\0\51\7\2\0\1\7\7\10\1\0\3\10"+
    "\1\0\4\10\1\7\10\0\1\10\10\0\2\7\2\10\2\0\12\10"+
    "\12\0\6\7\2\0\2\10\1\0\22\7\3\0\30\7\1\0\11\7"+
    "\1\0\1\7\2\0\7\7\3\0\1\10\4\0\6\10\1\0\1\10"+
    "\1\0\10\10\22\0\2\10\15\0\60\7\1\10\2\7\7\10\4\0"+
    "\10\7\10\10\1\0\12\10\47\0\2\7\1\0\1\7\2\0\2\7"+
    "\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7"+
    "\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\10\2\7"+
    "\6\10\1\0\2\10\1\7\2\0\5\7\1\0\1\7\1\0\6\10"+
    "\2\0\12\10\2\0\2\7\42\0\1\7\27\0\2\10\6\0\12\10"+
    "\13\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\7\1\0"+
    "\44\7\4\0\24\10\1\0\2\10\5\7\13\10\1\0\44\10\11\0"+
    "\1\10\71\0\53\7\24\10\1\7\12\10\6\0\6\7\4\10\4\7"+
    "\3\10\1\7\3\10\2\7\7\10\3\7\4\10\15\7\14\10\1\7"+
    "\17\10\2\0\46\7\12\0\53\7\1\0\1\7\3\0\u0149\7\1\0"+
    "\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\51\7\1\0"+
    "\4\7\2\0\41\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0"+
    "\4\7\2\0\17\7\1\0\71\7\1\0\4\7\2\0\103\7\2\0"+
    "\3\10\40\0\20\7\20\0\125\7\14\0\u026c\7\2\0\21\7\1\0"+
    "\32\7\5\0\113\7\3\0\3\7\17\0\15\7\1\0\4\7\3\10"+
    "\13\0\22\7\3\10\13\0\22\7\2\10\14\0\15\7\1\0\3\7"+
    "\1\0\2\10\14\0\64\7\40\10\3\0\1\7\3\0\2\7\1\10"+
    "\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\7\10\0\51\7"+
    "\1\10\1\7\5\0\106\7\12\0\35\7\3\0\14\10\4\0\14\10"+
    "\12\0\12\10\36\7\2\0\5\7\13\0\54\7\4\0\21\10\7\7"+
    "\2\10\6\0\12\10\46\0\27\7\5\10\4\0\65\7\12\10\1\0"+
    "\35\10\2\0\13\10\6\0\12\10\15\0\1\7\130\0\5\10\57\7"+
    "\21\10\7\7\4\0\12\10\21\0\11\10\14\0\3\10\36\7\12\10"+
    "\3\0\2\7\12\10\6\0\46\7\16\10\14\0\44\7\24\10\10\0"+
    "\12\10\3\0\3\7\12\10\44\7\122\0\3\10\1\0\25\10\4\7"+
    "\1\10\4\7\1\10\15\0\300\7\47\10\25\0\4\10\u0116\7\2\0"+
    "\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0"+
    "\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0"+
    "\15\7\5\0\3\7\1\0\7\7\16\0\5\10\32\0\5\10\20\0"+
    "\2\7\23\0\1\7\13\0\5\10\5\0\6\10\1\0\1\7\15\0"+
    "\1\7\20\0\15\7\3\0\32\7\26\0\15\10\4\0\1\10\3\0"+
    "\14\10\21\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0"+
    "\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0"+
    "\13\7\2\0\4\7\5\0\5\7\4\0\1\7\21\0\51\7\u0a77\0"+
    "\57\7\1\0\57\7\1\0\205\7\6\0\4\7\3\10\16\0\46\7"+
    "\12\0\66\7\11\0\1\7\17\0\1\10\27\7\11\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7\31\0"+
    "\11\7\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0\2\10"+
    "\2\0\3\7\1\0\132\7\1\0\4\7\5\0\51\7\3\0\136\7"+
    "\21\0\33\7\65\0\20\7\u0200\0\u19b6\7\112\0\u51cc\7\64\0\u048d\7"+
    "\103\0\56\7\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7"+
    "\1\10\14\0\2\10\1\0\31\7\10\0\120\7\2\10\45\0\11\7"+
    "\2\0\147\7\2\0\4\7\1\0\2\7\16\0\12\7\120\0\10\7"+
    "\1\10\3\7\1\10\4\7\1\10\27\7\5\10\20\0\1\7\7\0"+
    "\64\7\14\0\2\10\62\7\21\10\13\0\12\10\6\0\22\10\6\7"+
    "\3\0\1\7\4\0\12\10\34\7\10\10\2\0\27\7\15\10\14\0"+
    "\35\7\3\0\4\10\57\7\16\10\16\0\1\7\12\10\46\0\51\7"+
    "\16\10\11\0\3\7\1\10\10\7\2\10\2\0\12\10\6\0\27\7"+
    "\3\0\1\7\1\10\4\0\60\7\1\10\1\7\3\10\2\7\2\10"+
    "\5\7\2\10\1\7\1\10\1\7\30\0\3\7\43\0\6\7\2\0"+
    "\6\7\2\0\6\7\11\0\7\7\1\0\7\7\221\0\43\7\10\10"+
    "\1\0\2\10\2\0\12\10\6\0\u2ba4\7\14\0\27\7\4\0\61\7"+
    "\u2104\0\u012e\7\2\0\76\7\2\0\152\7\46\0\7\7\14\0\5\7"+
    "\5\0\1\7\1\10\12\7\1\0\15\7\1\0\5\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7"+
    "\2\0\66\7\50\0\15\7\3\0\20\10\20\0\7\10\14\0\2\7"+
    "\30\0\3\7\31\0\1\7\6\0\5\7\1\0\207\7\2\0\1\10"+
    "\4\0\1\7\13\0\12\10\7\0\32\7\4\0\1\7\1\0\32\7"+
    "\13\0\131\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7"+
    "\3\0\2\7\3\0\2\7\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\5\1\6\2\5\1\7\1\10\2\5\1\11\1\1"+
    "\4\5\1\12\6\5\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\1"+
    "\1\37\2\0\1\40\1\41\1\42\1\6\3\0\2\43"+
    "\10\5\1\44\1\45\1\46\1\47\5\5\1\50\2\0"+
    "\11\5\1\51\16\5\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\2\0\1\42\1\73\1\43"+
    "\1\0\14\5\1\74\2\5\1\75\3\0\5\5\1\76"+
    "\2\5\1\77\3\5\1\100\20\5\1\101\1\102\1\103"+
    "\1\0\1\2\1\73\1\104\2\5\1\105\1\5\1\106"+
    "\1\107\1\5\1\110\5\5\1\0\2\5\1\111\1\112"+
    "\2\5\1\113\1\114\16\5\1\115\5\5\1\116\1\117"+
    "\1\120\2\5\1\121\1\122\1\123\2\5\1\0\1\124"+
    "\2\5\1\125\6\5\1\126\2\5\1\127\4\5\1\130"+
    "\10\5\1\131\1\0\2\5\1\132\1\133\1\134\3\5"+
    "\1\135\1\136\1\5\1\137\1\5\1\140\1\5\1\141"+
    "\4\5\1\142\1\143\1\144\1\145\7\5\1\146\1\5"+
    "\1\147\1\150\5\5\1\151\1\152\1\5\1\153\1\154"+
    "\3\5\1\155\1\156\1\157\2\5\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\206\0\u010c\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2"+
    "\0\206\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\206"+
    "\0\206\0\206\0\206\0\206\0\206\0\206\0\206\0\u0797"+
    "\0\u07da\0\u081d\0\u0860\0\206\0\206\0\206\0\u08a3\0\u08e6"+
    "\0\u0929\0\u096c\0\u09af\0\u09f2\0\206\0\u0a35\0\u0a78\0\206"+
    "\0\206\0\u0abb\0\206\0\u0afe\0\u0b41\0\u0b84\0\206\0\u0bc7"+
    "\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\206\0\206\0\206\0\206\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb"+
    "\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103"+
    "\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u01d5\0\u1295\0\u12d8"+
    "\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0"+
    "\0\u1533\0\u1576\0\u15b9\0\u15fc\0\206\0\206\0\u163f\0\206"+
    "\0\u1682\0\206\0\206\0\206\0\206\0\206\0\206\0\206"+
    "\0\206\0\206\0\206\0\206\0\206\0\u16c5\0\u1708\0\206"+
    "\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920"+
    "\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u01d5"+
    "\0\u1b38\0\u1b7b\0\206\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca"+
    "\0\u1d0d\0\u1d50\0\u1d93\0\u01d5\0\u1dd6\0\u1e19\0\u01d5\0\u1e5c"+
    "\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074"+
    "\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c"+
    "\0\u22cf\0\u2312\0\u2355\0\206\0\u2398\0\206\0\u23db\0\u16c5"+
    "\0\206\0\u01d5\0\u241e\0\u2461\0\u01d5\0\u24a4\0\u01d5\0\u01d5"+
    "\0\u24e7\0\u01d5\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679"+
    "\0\u26bc\0\u26ff\0\u01d5\0\u01d5\0\u2742\0\u2785\0\u01d5\0\u01d5"+
    "\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d"+
    "\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u01d5\0\u2b72"+
    "\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\206\0\u01d5\0\u01d5\0\u2cc1"+
    "\0\u2d04\0\u01d5\0\u2d47\0\u01d5\0\u2d8a\0\u2dcd\0\u2e10\0\u01d5"+
    "\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028"+
    "\0\u306b\0\u01d5\0\u30ae\0\u30f1\0\u01d5\0\u3134\0\u3177\0\u31ba"+
    "\0\u31fd\0\u01d5\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f"+
    "\0\u33d2\0\u3415\0\u01d5\0\u3458\0\u349b\0\u34de\0\u01d5\0\u01d5"+
    "\0\u01d5\0\u3521\0\u3564\0\u35a7\0\u01d5\0\u01d5\0\u35ea\0\u01d5"+
    "\0\u362d\0\u01d5\0\u3670\0\u01d5\0\u36b3\0\u36f6\0\u3739\0\u377c"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u37bf\0\u3802\0\u3845\0\u3888"+
    "\0\u38cb\0\u390e\0\u3951\0\u01d5\0\u3994\0\u01d5\0\u01d5\0\u39d7"+
    "\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u01d5\0\u01d5\0\u3b26\0\u01d5"+
    "\0\u01d5\0\u3b69\0\u3bac\0\u3bef\0\u01d5\0\u01d5\0\u01d5\0\u3c32"+
    "\0\u3c75\0\u01d5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\11\1\14\1\15\3\11\1\14\1\16"+
    "\1\11\1\17\1\20\1\21\1\11\1\22\1\23\1\24"+
    "\1\3\1\11\1\25\1\26\1\27\1\30\1\31\1\14"+
    "\1\32\1\33\1\34\4\11\1\35\1\36\1\11\1\37"+
    "\2\11\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\2\3\30\63\1\64"+
    "\5\63\1\65\41\63\105\0\1\5\104\0\1\66\1\67"+
    "\62\0\1\70\102\0\1\71\12\0\1\10\2\0\100\10"+
    "\7\0\15\11\2\0\3\11\3\0\5\11\1\0\16\11"+
    "\34\0\1\72\2\73\1\74\2\0\2\75\1\72\2\76"+
    "\2\0\3\77\1\100\10\0\1\72\47\0\15\11\2\0"+
    "\3\11\3\0\5\11\1\0\4\11\1\101\11\11\34\0"+
    "\1\14\2\73\1\14\4\0\1\14\2\76\2\0\3\77"+
    "\1\100\10\0\1\14\47\0\3\11\1\102\11\11\2\0"+
    "\3\11\3\0\5\11\1\0\3\11\1\103\1\104\1\11"+
    "\1\105\7\11\32\0\3\11\1\106\4\11\1\107\4\11"+
    "\2\0\3\11\3\0\3\11\1\110\1\11\1\0\16\11"+
    "\47\0\1\111\43\0\1\112\37\0\1\113\42\0\1\114"+
    "\21\0\3\11\1\115\11\11\2\0\3\11\3\0\5\11"+
    "\1\0\1\11\1\116\1\11\1\117\1\120\11\11\32\0"+
    "\13\11\1\121\1\11\2\0\3\11\3\0\5\11\1\0"+
    "\4\11\1\122\11\11\34\0\1\100\2\0\1\100\4\0"+
    "\1\100\20\0\1\100\40\0\1\123\2\0\27\123\1\0"+
    "\1\124\47\123\7\0\15\11\2\0\3\11\3\0\4\11"+
    "\1\125\1\0\4\11\1\126\1\127\10\11\32\0\15\11"+
    "\2\0\3\11\3\0\4\11\1\130\1\0\6\11\1\131"+
    "\7\11\32\0\13\11\1\132\1\11\2\0\3\11\3\0"+
    "\1\133\4\11\1\0\3\11\1\134\12\11\32\0\13\11"+
    "\1\135\1\11\2\0\3\11\3\0\5\11\1\0\16\11"+
    "\32\0\15\11\2\0\1\136\2\11\3\0\3\11\1\137"+
    "\1\11\1\0\14\11\1\140\1\11\32\0\15\11\2\0"+
    "\3\11\3\0\1\141\1\11\1\142\2\11\1\0\5\11"+
    "\1\143\1\144\2\11\1\145\4\11\32\0\15\11\2\0"+
    "\3\11\3\0\1\11\1\146\3\11\1\0\2\11\1\147"+
    "\13\11\32\0\15\11\2\0\3\11\3\0\5\11\1\0"+
    "\4\11\1\150\11\11\32\0\15\11\2\0\3\11\3\0"+
    "\5\11\1\0\6\11\1\151\7\11\32\0\15\11\2\0"+
    "\3\11\3\0\1\152\3\11\1\153\1\0\3\11\1\154"+
    "\12\11\113\0\1\155\102\0\1\156\1\157\101\0\1\160"+
    "\1\0\1\161\100\0\1\162\102\0\1\163\6\0\1\164"+
    "\73\0\1\165\7\0\1\166\72\0\1\167\102\0\1\170"+
    "\12\0\1\63\2\0\30\63\1\0\5\63\1\0\41\63"+
    "\33\0\1\171\2\0\1\172\1\173\1\174\1\175\41\0"+
    "\1\66\1\4\1\5\100\66\5\176\1\177\75\176\11\0"+
    "\1\72\2\200\1\74\4\0\1\72\2\76\2\0\3\77"+
    "\1\100\10\0\1\72\51\0\1\74\2\0\1\74\4\0"+
    "\1\74\2\76\2\0\3\77\1\100\10\0\1\74\51\0"+
    "\1\201\2\0\3\201\2\0\3\201\2\0\3\201\4\0"+
    "\1\201\4\0\1\201\2\0\1\201\46\0\1\202\2\0"+
    "\1\202\4\0\1\202\2\0\2\203\14\0\1\202\51\0"+
    "\1\100\2\0\1\100\4\0\1\100\2\76\2\0\3\77"+
    "\11\0\1\100\47\0\15\11\2\0\3\11\3\0\3\11"+
    "\1\204\1\11\1\0\16\11\32\0\15\11\2\0\3\11"+
    "\3\0\5\11\1\0\3\11\1\205\12\11\32\0\15\11"+
    "\2\0\3\11\3\0\2\11\1\206\2\11\1\0\2\11"+
    "\1\207\13\11\32\0\15\11\2\0\3\11\3\0\3\11"+
    "\1\210\1\11\1\0\16\11\32\0\15\11\2\0\3\11"+
    "\3\0\5\11\1\0\3\11\1\211\12\11\32\0\15\11"+
    "\2\0\3\11\3\0\5\11\1\0\2\11\1\212\13\11"+
    "\32\0\15\11\2\0\3\11\3\0\2\11\1\213\2\11"+
    "\1\0\16\11\32\0\15\11\2\0\3\11\3\0\1\214"+
    "\4\11\1\0\16\11\32\0\15\11\2\0\3\11\3\0"+
    "\5\11\1\0\4\11\1\215\11\11\32\0\15\11\2\0"+
    "\3\11\3\0\3\11\1\216\1\11\1\0\16\11\32\0"+
    "\3\11\1\217\11\11\2\0\3\11\3\0\5\11\1\0"+
    "\16\11\32\0\15\11\2\0\3\11\3\0\4\11\1\220"+
    "\1\0\16\11\32\0\15\11\2\0\1\221\2\11\3\0"+
    "\5\11\1\0\16\11\32\0\15\11\2\0\3\11\3\0"+
    "\1\222\4\11\1\0\16\11\55\0\1\223\61\0\1\224"+
    "\7\0\1\225\4\0\1\123\3\0\2\123\1\226\5\123"+
    "\1\224\47\0\13\11\1\227\1\11\2\0\3\11\3\0"+
    "\5\11\1\0\16\11\32\0\15\11\2\0\3\11\3\0"+
    "\5\11\1\0\4\11\1\230\11\11\32\0\15\11\2\0"+
    "\3\11\3\0\2\11\1\231\2\11\1\0\16\11\32\0"+
    "\15\11\2\0\3\11\3\0\1\232\4\11\1\0\3\11"+
    "\1\233\1\11\1\234\10\11\32\0\15\11\2\0\3\11"+
    "\3\0\4\11\1\235\1\0\1\11\1\236\14\11\32\0"+
    "\15\11\2\0\3\11\3\0\5\11\1\0\11\11\1\237"+
    "\4\11\32\0\3\11\1\240\11\11\2\0\3\11\3\0"+
    "\5\11\1\0\16\11\32\0\15\11\2\0\3\11\3\0"+
    "\2\11\1\241\2\11\1\0\16\11\32\0\15\11\2\0"+
    "\3\11\3\0\2\11\1\242\2\11\1\0\16\11\32\0"+
    "\15\11\2\0\3\11\3\0\2\11\1\243\2\11\1\0"+
    "\2\11\1\244\13\11\32\0\15\11\2\0\3\11\3\0"+
    "\5\11\1\0\13\11\1\245\2\11\32\0\15\11\2\0"+
    "\3\11\3\0\5\11\1\0\13\11\1\246\2\11\32\0"+
    "\15\11\2\0\3\11\3\0\5\11\1\0\3\11\1\247"+
    "\12\11\32\0\15\11\2\0\3\11\3\0\3\11\1\250"+
    "\1\11\1\0\16\11\32\0\15\11\2\0\3\11\3\0"+
    "\5\11\1\0\4\11\1\251\11\11\32\0\15\11\2\0"+
    "\3\11\3\0\5\11\1\0\1\11\1\252\14\11\32\0"+
    "\15\11\2\0\3\11\3\0\5\11\1\0\2\11\1\253"+
    "\13\11\32\0\15\11\2\0\3\11\3\0\5\11\1\0"+
    "\2\11\1\254\13\11\32\0\3\11\1\255\11\11\2\0"+
    "\3\11\3\0\5\11\1\0\1\11\1\256\14\11\32\0"+
    "\15\11\2\0\3\11\3\0\5\11\1\0\1\11\1\257"+
    "\14\11\32\0\15\11\2\0\3\11\3\0\1\11\1\260"+
    "\3\11\1\0\16\11\32\0\15\11\2\0\3\11\3\0"+
    "\5\11\1\0\1\11\1\261\2\11\1\262\11\11\32\0"+
    "\6\11\1\263\6\11\2\0\3\11\3\0\5\11\1\0"+
    "\16\11\113\0\1\264\1\265\101\0\1\266\12\0\5\176"+
    "\1\267\101\176\1\270\1\267\75\176\11\0\1\201\2\271"+
    "\3\201\2\0\3\201\2\0\3\201\4\0\1\201\4\0"+
    "\1\201\2\0\1\201\46\0\1\202\2\0\1\202\4\0"+
    "\1\202\4\0\3\77\11\0\1\202\51\0\1\202\2\0"+
    "\1\202\4\0\1\202\20\0\1\202\47\0\15\11\2\0"+
    "\3\11\3\0\5\11\1\0\7\11\1\272\6\11\32\0"+
    "\15\11\2\0\3\11\3\0\5\11\1\0\2\11\1\273"+
    "\13\11\32\0\6\11\1\274\6\11\2\0\3\11\3\0"+
    "\5\11\1\0\16\11\32\0\13\11\1\275\1\11\2\0"+
    "\3\11\3\0\5\11\1\0\16\11\32\0\15\11\2\0"+
    "\3\11\3\0\2\11\1\276\2\11\1\0\16\11\32\0"+
    "\15\11\2\0\3\11\3\0\4\11\1\277\1\0\16\11"+
    "\32\0\13\11\1\300\1\11\2\0\3\11\3\0\5\11"+
    "\1\0\16\11\32\0\13\11\1\301\1\11\2\0\3\11"+
    "\3\0\5\11\1\0\16\11\32\0\15\11\2\0\3\11"+
    "\3\0\5\11\1\0\14\11\1\302\1\11\32\0\15\11"+
    "\2\0\3\11\3\0\5\11\1\0\3\11\1\303\12\11"+
    "\32\0\15\11\2\0\3\11\3\0\5\11\1\0\3\11"+
    "\1\304\12\11\32\0\15\11\2\0\3\11\3\0\5\11"+
    "\1\0\2\11\1\305\13\11\32\0\15\11\2\0\3\11"+
    "\3\0\5\11\1\0\3\11\1\306\12\11\32\0\15\11"+
    "\2\0\3\11\3\0\1\11\1\307\3\11\1\0\16\11"+
    "\34\0\1\225\7\0\1\225\10\0\1\223\7\0\1\225"+
    "\51\0\1\123\7\0\1\123\10\0\1\223\7\0\1\123"+
    "\51\0\1\310\2\0\3\310\2\0\3\310\2\0\3\310"+
    "\3\0\1\226\1\310\4\0\1\310\2\0\1\310\44\0"+
    "\15\11\2\0\3\11\3\0\5\11\1\0\3\11\1\311"+
    "\12\11\32\0\3\11\1\312\11\11\2\0\3\11\3\0"+
    "\5\11\1\0\16\11\32\0\13\11\1\313\1\11\2\0"+
    "\3\11\3\0\5\11\1\0\16\11\32\0\13\11\1\314"+
    "\1\11\2\0\3\11\3\0\5\11\1\0\16\11\32\0"+
    "\15\11\2\0\3\11\3\0\3\11\1\315\1\11\1\0"+
    "\16\11\32\0\15\11\2\0\3\11\3\0\5\11\1\0"+
    "\4\11\1\316\11\11\32\0\15\11\2\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\317\13\11\32\0\3\11\1\320"+
    "\11\11\2\0\3\11\3\0\5\11\1\0\16\11\32\0"+
    "\15\11\2\0\3\11\3\0\5\11\1\0\1\11\1\321"+
    "\14\11\32\0\15\11\2\0\3\11\3\0\1\322\4\11"+
    "\1\0\16\11\32\0\13\11\1\323\1\11\2\0\3\11"+
    "\3\0\5\11\1\0\16\11\32\0\15\11\2\0\3\11"+
    "\3\0\2\11\1\324\2\11\1\0\16\11\32\0\3\11"+
    "\1\325\11\11\2\0\3\11\3\0\5\11\1\0\4\11"+
    "\1\326\11\11\32\0\13\11\1\327\1\11\2\0\3\11"+
    "\3\0\5\11\1\0\16\11\32\0\15\11\2\0\3\11"+
    "\3\0\2\11\1\330\2\11\1\0\16\11\32\0\6\11"+
    "\1\331\6\11\2\0\3\11\3\0\5\11\1\0\16\11"+
    "\32\0\15\11\2\0\3\11\3\0\4\11\1\332\1\0"+
    "\16\11\32\0\15\11\2\0\3\11\3\0\2\11\1\333"+
    "\2\11\1\0\16\11\32\0\15\11\2\0\3\11\3\0"+
    "\2\11\1\334\2\11\1\0\16\11\32\0\13\11\1\335"+
    "\1\11\2\0\3\11\3\0\5\11\1\0\16\11\32\0"+
    "\15\11\2\0\3\11\3\0\5\11\1\0\3\11\1\336"+
    "\12\11\32\0\15\11\2\0\2\11\1\337\3\0\5\11"+
    "\1\0\16\11\32\0\3\11\1\340\11\11\2\0\3\11"+
    "\3\0\5\11\1\0\16\11\32\0\3\11\1\341\11\11"+
    "\2\0\3\11\3\0\5\11\1\0\16\11\32\0\15\11"+
    "\2\0\3\11\3\0\5\11\1\0\10\11\1\342\5\11"+
    "\32\0\15\11\2\0\3\11\3\0\2\11\1\343\2\11"+
    "\1\0\16\11\32\0\15\11\2\0\3\11\3\0\5\11"+
    "\1\0\12\11\1\344\3\11\113\0\1\345\12\0\4\176"+
    "\1\5\1\267\75\176\7\0\15\11\2\0\3\11\3\0"+
    "\5\11\1\0\2\11\1\346\13\11\32\0\15\11\2\0"+
    "\3\11\3\0\5\11\1\0\6\11\1\347\7\11\32\0"+
    "\15\11\2\0\3\11\3\0\5\11\1\0\1\11\1\350"+
    "\14\11\32\0\15\11\2\0\3\11\3\0\3\11\1\351"+
    "\1\11\1\0\16\11\32\0\15\11\2\0\3\11\3\0"+
    "\2\11\1\352\2\11\1\0\16\11\32\0\3\11\1\353"+
    "\11\11\2\0\3\11\3\0\5\11\1\0\16\11\32\0"+
    "\13\11\1\354\1\11\2\0\3\11\3\0\5\11\1\0"+
    "\16\11\32\0\15\11\2\0\3\11\3\0\1\355\4\11"+
    "\1\0\16\11\32\0\3\11\1\356\11\11\2\0\3\11"+
    "\3\0\5\11\1\0\16\11\34\0\1\357\2\0\3\357"+
    "\2\0\3\357\2\0\3\357\4\0\1\357\4\0\1\357"+
    "\2\0\1\357\44\0\15\11\2\0\3\11\3\0\5\11"+
    "\1\0\12\11\1\360\3\11\32\0\13\11\1\361\1\11"+
    "\2\0\3\11\3\0\5\11\1\0\16\11\32\0\15\11"+
    "\2\0\3\11\3\0\5\11\1\0\2\11\1\362\13\11"+
    "\32\0\15\11\2\0\3\11\3\0\5\11\1\0\11\11"+
    "\1\363\4\11\32\0\15\11\2\0\3\11\3\0\5\11"+
    "\1\0\10\11\1\364\5\11\32\0\15\11\2\0\3\11"+
    "\3\0\4\11\1\365\1\0\16\11\32\0\15\11\2\0"+
    "\3\11\3\0\4\11\1\366\1\0\16\11\32\0\15\11"+
    "\2\0\3\11\3\0\5\11\1\0\3\11\1\367\12\11"+
    "\32\0\13\11\1\370\1\11\2\0\3\11\3\0\5\11"+
    "\1\0\16\11\32\0\15\11\2\0\3\11\3\0\4\11"+
    "\1\371\1\0\16\11\32\0\15\11\2\0\3\11\3\0"+
    "\4\11\1\372\1\0\16\11\32\0\15\11\2\0\3\11"+
    "\3\0\5\11\1\0\1\11\1\373\14\11\32\0\15\11"+
    "\2\0\3\11\3\0\5\11\1\0\6\11\1\374\7\11"+
    "\32\0\15\11\2\0\3\11\3\0\2\11\1\375\2\11"+
    "\1\0\16\11\32\0\6\11\1\376\6\11\2\0\3\11"+
    "\3\0\5\11\1\0\16\11\32\0\15\11\2\0\3\11"+
    "\3\0\4\11\1\377\1\0\16\11\32\0\15\11\2\0"+
    "\3\11\3\0\4\11\1\u0100\1\0\16\11\32\0\15\11"+
    "\2\0\3\11\3\0\2\11\1\u0101\2\11\1\0\16\11"+
    "\32\0\13\11\1\u0102\1\11\2\0\3\11\3\0\5\11"+
    "\1\0\16\11\32\0\15\11\2\0\3\11\3\0\5\11"+
    "\1\0\1\11\1\u0103\14\11\32\0\15\11\2\0\3\11"+
    "\3\0\5\11\1\0\3\11\1\u0104\12\11\32\0\13\11"+
    "\1\u0105\1\11\2\0\3\11\3\0\5\11\1\0\16\11"+
    "\32\0\15\11\2\0\3\11\3\0\5\11\1\0\3\11"+
    "\1\u0106\12\11\32\0\15\11\2\0\3\11\3\0\3\11"+
    "\1\u0107\1\11\1\0\16\11\32\0\15\11\2\0\2\11"+
    "\1\u0108\3\0\5\11\1\0\16\11\32\0\3\11\1\u0109"+
    "\11\11\2\0\3\11\3\0\5\11\1\0\16\11\32\0"+
    "\3\11\1\u010a\11\11\2\0\3\11\3\0\5\11\1\0"+
    "\16\11\32\0\13\11\1\u010b\1\11\2\0\3\11\3\0"+
    "\5\11\1\0\16\11\34\0\1\u010c\2\0\3\u010c\2\0"+
    "\3\u010c\2\0\3\u010c\4\0\1\u010c\4\0\1\u010c\2\0"+
    "\1\u010c\44\0\15\11\2\0\3\11\3\0\5\11\1\0"+
    "\3\11\1\u010d\12\11\32\0\15\11\2\0\3\11\3\0"+
    "\5\11\1\0\1\11\1\u010e\14\11\32\0\15\11\2\0"+
    "\3\11\3\0\5\11\1\0\2\11\1\u010f\13\11\32\0"+
    "\13\11\1\u0110\1\11\2\0\3\11\3\0\5\11\1\0"+
    "\16\11\32\0\15\11\2\0\3\11\3\0\3\11\1\u0111"+
    "\1\11\1\0\16\11\32\0\15\11\2\0\1\u0112\2\11"+
    "\3\0\5\11\1\0\16\11\32\0\15\11\2\0\3\11"+
    "\3\0\3\11\1\u0113\1\11\1\0\16\11\32\0\15\11"+
    "\2\0\3\11\3\0\5\11\1\0\14\11\1\u0114\1\11"+
    "\32\0\15\11\2\0\3\11\3\0\2\11\1\u0115\2\11"+
    "\1\0\16\11\32\0\6\11\1\u0116\6\11\2\0\3\11"+
    "\3\0\5\11\1\0\16\11\32\0\15\11\2\0\3\11"+
    "\3\0\4\11\1\u0117\1\0\16\11\32\0\15\11\2\0"+
    "\3\11\3\0\5\11\1\0\6\11\1\u0118\7\11\32\0"+
    "\15\11\2\0\3\11\3\0\5\11\1\0\3\11\1\u0119"+
    "\12\11\32\0\15\11\2\0\3\11\3\0\2\11\1\u011a"+
    "\2\11\1\0\16\11\32\0\15\11\2\0\3\11\3\0"+
    "\5\11\1\0\1\11\1\u011b\14\11\32\0\6\11\1\u011c"+
    "\6\11\2\0\3\11\3\0\5\11\1\0\16\11\32\0"+
    "\15\11\2\0\3\11\3\0\2\11\1\u011d\2\11\1\0"+
    "\16\11\32\0\6\11\1\u011e\6\11\2\0\3\11\3\0"+
    "\5\11\1\0\16\11\32\0\15\11\2\0\3\11\3\0"+
    "\5\11\1\0\7\11\1\u011f\6\11\32\0\15\11\2\0"+
    "\3\11\3\0\1\u0120\4\11\1\0\16\11\32\0\15\11"+
    "\2\0\3\11\3\0\5\11\1\0\2\11\1\u0121\13\11"+
    "\32\0\15\11\2\0\3\11\3\0\5\11\1\0\5\11"+
    "\1\u0122\10\11\32\0\15\11\2\0\3\11\3\0\2\11"+
    "\1\u0123\2\11\1\0\16\11\34\0\1\123\2\0\3\123"+
    "\2\0\3\123\2\0\3\123\4\0\1\123\4\0\1\123"+
    "\2\0\1\123\44\0\15\11\2\0\3\11\3\0\3\11"+
    "\1\u0124\1\11\1\0\16\11\32\0\13\11\1\u0125\1\11"+
    "\2\0\3\11\3\0\5\11\1\0\16\11\32\0\15\11"+
    "\2\0\3\11\3\0\5\11\1\0\3\11\1\u0126\12\11"+
    "\32\0\6\11\1\u0127\6\11\2\0\3\11\3\0\5\11"+
    "\1\0\16\11\32\0\13\11\1\u0128\1\11\2\0\3\11"+
    "\3\0\5\11\1\0\16\11\32\0\15\11\2\0\3\11"+
    "\3\0\5\11\1\0\4\11\1\u0129\11\11\32\0\6\11"+
    "\1\u012a\6\11\2\0\3\11\3\0\5\11\1\0\16\11"+
    "\32\0\3\11\1\u012b\11\11\2\0\3\11\3\0\5\11"+
    "\1\0\16\11\32\0\13\11\1\u012c\1\11\2\0\3\11"+
    "\3\0\5\11\1\0\16\11\32\0\15\11\2\0\3\11"+
    "\3\0\2\11\1\u012d\2\11\1\0\16\11\32\0\13\11"+
    "\1\u012e\1\11\2\0\3\11\3\0\5\11\1\0\16\11"+
    "\32\0\13\11\1\u012f\1\11\2\0\3\11\3\0\5\11"+
    "\1\0\16\11\32\0\15\11\2\0\3\11\3\0\3\11"+
    "\1\u0130\1\11\1\0\16\11\32\0\6\11\1\u0131\6\11"+
    "\2\0\3\11\3\0\5\11\1\0\16\11\32\0\13\11"+
    "\1\u0132\1\11\2\0\3\11\3\0\5\11\1\0\16\11"+
    "\32\0\15\11\2\0\3\11\3\0\3\11\1\u0133\1\11"+
    "\1\0\16\11\32\0\15\11\2\0\3\11\3\0\3\11"+
    "\1\u0134\1\11\1\0\16\11\32\0\15\11\2\0\3\11"+
    "\3\0\2\11\1\u0135\2\11\1\0\16\11\32\0\13\11"+
    "\1\u0136\1\11\2\0\3\11\3\0\5\11\1\0\16\11"+
    "\32\0\13\11\1\u0137\1\11\2\0\3\11\3\0\5\11"+
    "\1\0\16\11\32\0\15\11\2\0\3\11\3\0\2\11"+
    "\1\u0138\2\11\1\0\16\11\32\0\13\11\1\u0139\1\11"+
    "\2\0\3\11\3\0\5\11\1\0\16\11\32\0\15\11"+
    "\2\0\3\11\3\0\5\11\1\0\4\11\1\u013a\11\11"+
    "\32\0\15\11\2\0\3\11\3\0\2\11\1\u013b\2\11"+
    "\1\0\16\11\32\0\15\11\2\0\3\11\3\0\5\11"+
    "\1\0\1\11\1\u013c\14\11\32\0\15\11\2\0\2\11"+
    "\1\u013d\3\0\5\11\1\0\16\11\32\0\15\11\2\0"+
    "\1\u013e\2\11\3\0\5\11\1\0\16\11\32\0\15\11"+
    "\2\0\3\11\3\0\5\11\1\0\2\11\1\u013f\13\11"+
    "\32\0\15\11\2\0\3\11\3\0\5\11\1\0\15\11"+
    "\1\u0140\32\0\13\11\1\u0141\1\11\2\0\3\11\3\0"+
    "\5\11\1\0\16\11\32\0\15\11\2\0\2\11\1\u0142"+
    "\3\0\5\11\1\0\16\11\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15544];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\23\1\1\11\6\1\10\11"+
    "\4\1\3\11\6\1\1\11\2\0\2\11\1\1\1\11"+
    "\3\0\1\11\11\1\4\11\6\1\2\0\30\1\2\11"+
    "\1\1\1\11\1\1\14\11\2\0\1\11\2\1\1\0"+
    "\17\1\1\11\3\0\35\1\1\11\1\1\1\11\1\0"+
    "\1\1\1\11\16\1\1\0\34\1\1\11\11\1\1\0"+
    "\34\1\1\0\66\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  StringBuffer string = new StringBuffer();

  private Token createToken(String str, Symbol sym) {
  	return new Token(str, sym, yyline+1, yycolumn+1);
  }
  
  private Token createToken(Symbol sym) {
  	return new Token(sym.getStr(), sym, yyline+1, yycolumn+1);
  }
  
  public List<Token> runLexicalAnalysis() {
  	List<Token> result = new ArrayList<Token>();
  	try{
  		while (!this.zzAtEOF) {
  			Token token = this.yylex();
  			if (token != null) {
  				result.add(token);
  			}
  		}
  	} catch(Exception e) {
  		e.printStackTrace();
  		//return null;
  	}
  	return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 69: 
          { return createToken(Symbol.CASE);
          }
        case 113: break;
        case 29: 
          { return createToken(Symbol.PERCENT);
          }
        case 114: break;
        case 46: 
          { return createToken(Symbol.LDOUBLEANGLEBRACKET);
          }
        case 115: break;
        case 63: 
          { return createToken(Symbol.NEW);
          }
        case 116: break;
        case 102: 
          { return createToken(Symbol.PRIVATE);
          }
        case 117: break;
        case 33: 
          { return createToken(Symbol.ASTERISKEQUAL);
          }
        case 118: break;
        case 99: 
          { return createToken(Symbol.FINALLY);
          }
        case 119: break;
        case 79: 
          { return createToken(Symbol.CLASS);
          }
        case 120: break;
        case 103: 
          { return createToken(Symbol.PACKAGE);
          }
        case 121: break;
        case 78: 
          { return createToken(Symbol.RTRIPLEANGLEBRACKETEQUAL);
          }
        case 122: break;
        case 50: 
          { return createToken(Symbol.VERTICALVAREQUAL);
          }
        case 123: break;
        case 85: 
          { return createToken(Symbol.THROW);
          }
        case 124: break;
        case 52: 
          { return createToken(Symbol.CIRCUMFLEXEQUAL);
          }
        case 125: break;
        case 93: 
          { return createToken(Symbol.IMPORT);
          }
        case 126: break;
        case 36: 
          { return createToken(Symbol.MINUSMINUS);
          }
        case 127: break;
        case 106: 
          { return createToken(Symbol.VOLATILE);
          }
        case 128: break;
        case 77: 
          { return createToken(Symbol.VOID);
          }
        case 129: break;
        case 34: 
          { return createToken(yytext(), Symbol.OCTALINTEGERLITERAL);
          }
        case 130: break;
        case 41: 
          { return createToken(Symbol.IF);
          }
        case 131: break;
        case 15: 
          { return createToken(Symbol.LBLACKET);
          }
        case 132: break;
        case 37: 
          { return createToken(Symbol.MINUSEQUAL);
          }
        case 133: break;
        case 5: 
          { return createToken(yytext(), Symbol.IDENTIFIER);
          }
        case 134: break;
        case 100: 
          { return createToken(Symbol.DEFAULT);
          }
        case 135: break;
        case 62: 
          { return createToken(Symbol.TRY);
          }
        case 136: break;
        case 61: 
          { return createToken(yytext(), Symbol.CHARACTERLITERAL);
          }
        case 137: break;
        case 56: 
          { string.append('\n');
          }
        case 138: break;
        case 104: 
          { return createToken(Symbol.CONTINUE);
          }
        case 139: break;
        case 83: 
          { return createToken(Symbol.FALSE);
          }
        case 140: break;
        case 58: 
          { string.append('\"');
          }
        case 141: break;
        case 39: 
          { return createToken(Symbol.PLUSEQUAL);
          }
        case 142: break;
        case 38: 
          { return createToken(Symbol.PLUSPLUS);
          }
        case 143: break;
        case 21: 
          { return createToken(Symbol.LESS);
          }
        case 144: break;
        case 16: 
          { return createToken(Symbol.RBLACKET);
          }
        case 145: break;
        case 43: 
          { return createToken(Symbol.GREATEREQUAL);
          }
        case 146: break;
        case 71: 
          { return createToken(Symbol.ELSE);
          }
        case 147: break;
        case 9: 
          { return createToken(Symbol.DOT);
          }
        case 148: break;
        case 14: 
          { return createToken(Symbol.RBRACE);
          }
        case 149: break;
        case 84: 
          { return createToken(Symbol.BREAK);
          }
        case 150: break;
        case 66: 
          { return createToken(Symbol.RTRIPLEANGLEBRACKET);
          }
        case 151: break;
        case 64: 
          { return createToken(Symbol.INT);
          }
        case 152: break;
        case 57: 
          { string.append('\r');
          }
        case 153: break;
        case 17: 
          { return createToken(Symbol.SEMICOLON);
          }
        case 154: break;
        case 26: 
          { return createToken(Symbol.AND);
          }
        case 155: break;
        case 10: 
          { string.setLength(0); yybegin(STRING);
          }
        case 156: break;
        case 111: 
          { return createToken(Symbol.IMPLEMENTS);
          }
        case 157: break;
        case 24: 
          { return createToken(Symbol.QUESTIONMARK);
          }
        case 158: break;
        case 105: 
          { return createToken(Symbol.ABSTRACT);
          }
        case 159: break;
        case 44: 
          { return createToken(Symbol.RDOUBLEANGLEBRACKET);
          }
        case 160: break;
        case 49: 
          { return createToken(Symbol.ANDAND);
          }
        case 161: break;
        case 27: 
          { return createToken(Symbol.VERTICALVAR);
          }
        case 162: break;
        case 55: 
          { string.append('\t');
          }
        case 163: break;
        case 73: 
          { return createToken(Symbol.BYTE);
          }
        case 164: break;
        case 42: 
          { return createToken(Symbol.EQUALEQUAL);
          }
        case 165: break;
        case 22: 
          { return createToken(Symbol.NOT);
          }
        case 166: break;
        case 82: 
          { return createToken(Symbol.FINAL);
          }
        case 167: break;
        case 109: 
          { return createToken(Symbol.PROTECTED);
          }
        case 168: break;
        case 53: 
          { return createToken(Symbol.PERCENTEQUAL);
          }
        case 169: break;
        case 81: 
          { return createToken(Symbol.FLOAT);
          }
        case 170: break;
        case 92: 
          { return createToken(Symbol.RETURN);
          }
        case 171: break;
        case 7: 
          { return createToken(Symbol.MINUS);
          }
        case 172: break;
        case 108: 
          { return createToken(Symbol.INTERFACE);
          }
        case 173: break;
        case 65: 
          { return createToken(Symbol.RDOUBLEANGLEBRACKETEQUAL);
          }
        case 174: break;
        case 35: 
          { return createToken(yytext(), Symbol.FLOATINGPOINTLITERAL);
          }
        case 175: break;
        case 13: 
          { return createToken(Symbol.LBRACE);
          }
        case 176: break;
        case 25: 
          { return createToken(Symbol.COLON);
          }
        case 177: break;
        case 94: 
          { return createToken(Symbol.STATIC);
          }
        case 178: break;
        case 74: 
          { return createToken(Symbol.TRUE);
          }
        case 179: break;
        case 86: 
          { return createToken(Symbol.SUPER);
          }
        case 180: break;
        case 31: 
          { yybegin(YYINITIAL); 
								return createToken(string.toString(), Symbol.STRINGLITERAL);
          }
        case 181: break;
        case 107: 
          { return createToken(Symbol.TRANSIENT);
          }
        case 182: break;
        case 76: 
          { return createToken(Symbol.NULL);
          }
        case 183: break;
        case 19: 
          { return createToken(Symbol.EQUAL);
          }
        case 184: break;
        case 8: 
          { return createToken(Symbol.PLUS);
          }
        case 185: break;
        case 68: 
          { return createToken(Symbol.LONG);
          }
        case 186: break;
        case 90: 
          { return createToken(Symbol.THROWS);
          }
        case 187: break;
        case 97: 
          { return createToken(Symbol.PUBLIC);
          }
        case 188: break;
        case 1: 
          { return createToken(yytext(), Symbol.UNKNOWN);
          }
        case 189: break;
        case 3: 
          { return createToken(Symbol.SLASH);
          }
        case 190: break;
        case 28: 
          { return createToken(Symbol.CIRCUMFLEX);
          }
        case 191: break;
        case 67: 
          { return createToken(Symbol.LDOUBLEANGLEBRACKETEQUAL);
          }
        case 192: break;
        case 88: 
          { return createToken(Symbol.WHILE);
          }
        case 193: break;
        case 47: 
          { return createToken(Symbol.NOTEQUAL);
          }
        case 194: break;
        case 12: 
          { return createToken(Symbol.RPAREN);
          }
        case 195: break;
        case 23: 
          { return createToken(Symbol.TILDE);
          }
        case 196: break;
        case 96: 
          { return createToken(Symbol.ASSERT);
          }
        case 197: break;
        case 75: 
          { return createToken(Symbol.THIS);
          }
        case 198: break;
        case 4: 
          { return createToken(Symbol.ASTERISK);
          }
        case 199: break;
        case 72: 
          { return createToken(Symbol.ENUM);
          }
        case 200: break;
        case 18: 
          { return createToken(Symbol.COMMA);
          }
        case 201: break;
        case 110: 
          { return createToken(Symbol.INSTANCEOF);
          }
        case 202: break;
        case 98: 
          { return createToken(Symbol.EXTENDS);
          }
        case 203: break;
        case 40: 
          { return createToken(Symbol.DO);
          }
        case 204: break;
        case 54: 
          { string.append('\\');
          }
        case 205: break;
        case 32: 
          { return createToken(Symbol.SLASHEQUAL);
          }
        case 206: break;
        case 112: 
          { return createToken(Symbol.SYNCHRONIZED);
          }
        case 207: break;
        case 80: 
          { return createToken(Symbol.CATCH);
          }
        case 208: break;
        case 70: 
          { return createToken(Symbol.CHAR);
          }
        case 209: break;
        case 59: 
          { return createToken(yytext(), Symbol.HEXINTEGERLITERAL);
          }
        case 210: break;
        case 48: 
          { return createToken(Symbol.ANDEQUAL);
          }
        case 211: break;
        case 20: 
          { return createToken(Symbol.GREATER);
          }
        case 212: break;
        case 2: 
          { /* ignore */
          }
        case 213: break;
        case 11: 
          { return createToken(Symbol.LPAREN);
          }
        case 214: break;
        case 101: 
          { return createToken(Symbol.BOOLEAN);
          }
        case 215: break;
        case 30: 
          { string.append( yytext() );
          }
        case 216: break;
        case 51: 
          { return createToken(Symbol.OR);
          }
        case 217: break;
        case 91: 
          { return createToken(Symbol.NATIVE);
          }
        case 218: break;
        case 89: 
          { return createToken(Symbol.DOUBLE);
          }
        case 219: break;
        case 45: 
          { return createToken(Symbol.LESSEQUAL);
          }
        case 220: break;
        case 60: 
          { return createToken(Symbol.FOR);
          }
        case 221: break;
        case 87: 
          { return createToken(Symbol.SHORT);
          }
        case 222: break;
        case 95: 
          { return createToken(Symbol.SWITCH);
          }
        case 223: break;
        case 6: 
          { return createToken(yytext(), Symbol.INTEGERLITERAL);
          }
        case 224: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
